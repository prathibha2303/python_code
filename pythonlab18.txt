----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. How to find the mean of every NumPy array in the given list?
Input:
list = [
np.array([3, 2, 8, 9]),
np.array([4, 12, 34, 25, 78]),
np.array([23, 12, 67])
]

Code:
import numpy as np										#importing numpy
list = [											#creating a list
    np.array([3, 2, 8, 9]),									#creating numpy array inside the list
    np.array([4, 12, 34, 25, 78]),								#creating numpy array inside the list
    np.array([23, 12, 67])]									#creating numpy array inside the list
mean_of_list1=np.mean(list[0])								#calculating mean							
print(mean_of_list1)										#printing the mean
mean_of_list2=np.mean(list[1])							           	#calculating mean	
print(mean_of_list2)										#printing the mean
mean_of_list3=np.mean(list[2])								#calculating mean	
print(mean_of_list3)										#printing the mean

Output:
5.5
30.6
34.0

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Compute the median of the flattened NumPy array 

Input: x_odd = np.array([1, 2, 3, 4, 5, 6, 7])

import numpy as np									#importing the numpy
x_odd= np.array([1, 2, 3, 4, 5, 6, 7])							#creating a numpy array
median_of_x_odd=np.median(x_odd)							#calculating median using median()
print(median_of_x_odd)								#printing median

output:
4.0

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Compute the standard deviation of the NumPy array

Input: arr = [20, 2, 7, 1, 34]

import numpy as np									#importing  the numpy
arr = [20, 2, 7, 1, 34]								#creating a list
std_of_arr=np.std(arr)								#calculating standard deviation
print(std_of_arr)									#print standard deviation

output:
12.576167937809991

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Suppose you have a CSV file named 'house_prices.csv' with price information, and you want to perform the following operations: 
● 1.Read the data from the CSV file into a NumPy array. 
● 2.Calculate the average of house prices. 
● 3.Identify house price above the average. 
● 4.Save the list of high prices to a new CSV file. Note: Download 'house_prices.csv' file from LMS.

Code:
import numpy as np           											#importing the numpy                                                                                           
data = np.genfromtxt('house_prices.csv', delimiter=',', names=True, dtype=None, encoding=None)                             		#declaring file 
average_price = np.mean(data['Price'])                                                                                   				#calculating average
high_prices = data[data['Price'] > average_price]                                                                        				#doing filter using logical operater
np.savetxt('high_prices.csv', high_prices, delimiter=',', header='Area,Price', fmt='%s,%f', comments='')             		#saving the file
print("Average house price:", average_price) 									#print statements

Output:
Average house price: 7584.263018456919
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



